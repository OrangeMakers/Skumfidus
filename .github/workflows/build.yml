name: Automated Build

on:
  push:
    paths:
      - 'CHANGELOG.md'
      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.0.0
      with:
        versionSpec: '6.x'
        preferLatestVersion: true
    
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v3.0.0
      with:
        useConfigFile: true

    - name: Check and update CHANGELOG.md format
      id: changelog
      run: |
        # Check if [Unreleased] section exists and has a non-default description
        DESCRIPTION=$(sed -n '/^## \[Unreleased\]/,/^###/p' CHANGELOG.md | sed '1d;$d' | tr -d '[:space:]')
        if [ -z "$DESCRIPTION" ] || [ "$DESCRIPTION" = "[Insertreleasedescriptionhere]" ]; then
          echo "Error: [Unreleased] section is missing or has not been updated in CHANGELOG.md"
          exit 1
        fi
        
        # Check and update each section
        for SECTION in "Added" "Changed" "Deprecated" "Removed" "Fixed" "Security"; do
          if ! grep -q "^### $SECTION" CHANGELOG.md; then
            echo "Error: ### $SECTION section is missing in CHANGELOG.md"
            exit 1
          fi
          
          SECTION_CONTENT=$(sed -n "/^### $SECTION/,/^###/p" CHANGELOG.md | sed '1d;$d' | sed '/^$/d')
          if [ -z "$SECTION_CONTENT" ] || [ "$SECTION_CONTENT" = "- [Update ${SECTION}s]" ]; then
            sed -i "/^### $SECTION/,/^###/c\### $SECTION\n- No new ${SECTION}" CHANGELOG.md
          elif echo "$SECTION_CONTENT" | grep -q "^\- \[Update ${SECTION}s\]"; then
            sed -i "/^### $SECTION/,/^###/{ /^\- \[Update ${SECTION}s\]/d; }" CHANGELOG.md
          fi
        done
        
        # Extract the latest entry
        LATEST_ENTRY=$(sed -n '/^## \[Unreleased\]/,/^## /p' CHANGELOG.md | sed '$d' | sed '1d' | sed '/./,$!d')
        echo "latest_entry<<EOF" >> $GITHUB_OUTPUT
        echo "$LATEST_ENTRY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Update the [Unreleased] header with the new version
        sed -i "s/## \[Unreleased\]/## [${{ steps.gitversion.outputs.semVer }}] - $(date +'%Y-%m-%d')/" CHANGELOG.md

    - name: Set up PlatformIO
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - run: pip install platformio
    
    - name: Build project
      run: platformio run
        
    - name: Rename firmware file
      run: |
        mv ./.pio/build/esp32doit-devkit-v1/firmware.bin ./firmware-v${{ steps.gitversion.outputs.semVer }}.bin

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.gitversion.outputs.semVer }}
        name: Release v${{ steps.gitversion.outputs.semVer }}
        body: ${{ steps.changelog.outputs.latest_entry }}
        files: ./firmware-v${{ steps.gitversion.outputs.semVer }}.bin
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit CHANGELOG.md changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Update CHANGELOG.md for version ${{ steps.gitversion.outputs.semVer }}"
        git push

name: Automated Build
run-name: Build firmware and create release

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'
  pull_request:
    branches:
      - main
      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.0.0
      with:
        versionSpec: '6.x'
        preferLatestVersion: true
    
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v3.0.0
      with:
        useConfigFile: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Check and update CHANGELOG.md format
      id: changelog
      run: |
        python - <<EOF
        import re
        import sys
        from datetime import date

        def check_and_update_changelog(version):
            with open('CHANGELOG.md', 'r') as f:
                content = f.read()

            # Check if [Unreleased] section exists and has a non-default description
            unreleased_match = re.search(r'^## \[Unreleased\]\s*\n(.*?)\n^###', content, re.MULTILINE | re.DOTALL)
            if not unreleased_match or unreleased_match.group(1).strip() == "[Insert release description here]":
                print("Error: [Unreleased] section is missing or has not been updated in CHANGELOG.md")
                sys.exit(1)

            sections = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
            for section in sections:
                if f"### {section}" not in content:
                    print(f"Error: ### {section} section is missing in CHANGELOG.md")
                    sys.exit(1)

                section_pattern = rf'### {section}\s*(.*?)(?=\n###|\Z)'
                section_match = re.search(section_pattern, content, re.DOTALL)
                if section_match:
                    section_content = section_match.group(1).strip()
                    if not section_content or section_content == f"- [Update {section}]":
                        content = re.sub(section_pattern, f"### {section}\n- No changes\n", content, flags=re.DOTALL)
                    else:
                        content = re.sub(rf'- \[Update {section}\]\s*\n', '', content)

            # Extract the latest entry
            latest_entry = re.search(r'^## \[Unreleased\](.*?)(?=^##|\Z)', content, re.MULTILINE | re.DOTALL).group(1).strip()

            # Update the [Unreleased] header with the new version
            today = date.today().isoformat()
            content = re.sub(r'## \[Unreleased\]', f'## [{version}] - {today}', content, count=1)

            with open('CHANGELOG.md', 'w') as f:
                f.write(content)

            return latest_entry

        version = "${{ steps.gitversion.outputs.semVer }}"
        latest_entry = check_and_update_changelog(version)
        with open(r'$GITHUB_OUTPUT', 'a') as fh:
            fh.write(f'latest_entry<<EOF\n{latest_entry}\nEOF\n')
        EOF

    - name: Install PlatformIO
      run: pip install platformio
    
    - name: Build project
      run: platformio run
        
    - name: Rename firmware file
      run: |
        mv ./.pio/build/esp32doit-devkit-v1/firmware.bin ./firmware-v${{ steps.gitversion.outputs.semVer }}.bin

    - name: Create Release and Upload Asset
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.gitversion.outputs.semVer }}
        name: Release v${{ steps.gitversion.outputs.semVer }}
        body: ${{ steps.changelog.outputs.latest_entry }}
        files: ./firmware-v${{ steps.gitversion.outputs.semVer }}.bin
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit CHANGELOG.md changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Update CHANGELOG.md for version ${{ steps.gitversion.outputs.semVer }}"
        git push

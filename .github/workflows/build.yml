name: Automated Build
run-name: Build firmware and create release

on:
  push:
    branches:
      - main
    paths:
      - 'RELEASE.md'
      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
    
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.0.0
      with:
        versionSpec: '6.x'
        preferLatestVersion: true
    
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v3.0.0
      with:
        useConfigFile: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Validate RELEASE.md and update CHANGELOG.md
      id: changelog
      run: |
        python .github/scripts/update_changelog.py "${{ steps.gitversion.outputs.semVer }}" >> $GITHUB_OUTPUT

    - name: Install PlatformIO
      run: pip install platformio
    
    - name: Build project
      run: platformio run
        
    - name: Create firmware directory and copy firmware files
      run: |
        mkdir -p ./firmware
        cp ./.pio/build/esp32doit-devkit-v1/bootloader.bin ./firmware/bootloader.bin
        cp ./.pio/build/esp32doit-devkit-v1/partitions.bin ./firmware/partitions.bin
        cp ${{ env.GITHUB_WORKSPACE }}/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin ./firmware/boot_app0.bin
        cp ./.pio/build/esp32doit-devkit-v1/firmware.bin ./firmware/firmware.bin

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.gitversion.outputs.semVer }}
        name: Release v${{ steps.gitversion.outputs.semVer }}
        body: ${{ steps.changelog.outputs.latest_entry }}
        files: |
          ./firmware/bootloader.bin
          ./firmware/partitions.bin
          ./firmware/boot_app0.bin
          ./firmware/firmware.bin
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md RELEASE_NEXT.md
        git rm RELEASE.md
        git commit -m "Update CHANGELOG.md and create RELEASE_NEXT.md for version ${{ steps.gitversion.outputs.semVer }}"
        git push
